//here is wehre I got this from:
//https://www.ibm.com/developerworks/community/blogs/58e72888-6340-46ac-b488-d31aa4058e9c/entry/understanding_linux_open_system_call?lang=en

#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>
#include <errno.h>

#include <iostream>
using namespace std;

struct headerDescriptor {
    char preheader[72];
    char name[48];
    float versionNum;
    unsigned int sizeOfHeader;
    int imageType;
    int imageFlags;
    char imageDescription[32];
    int offsetBlocks;
    int offsetData;
    unsigned int numOfCylinders;
    unsigned int numOfHeads;
    unsigned int numOfSectors;
    unsigned int sectorSize;
    //4 char unused
    long long int diskSize;
    unsigned int blockSize;
    int blockExtraData;
    unsigned int numOfBlocksInHDD;
    unsigned int numOfBlocksAllocated;
    char UUID[16];
    char UUIDLastSnap[16];
    char UUIDLink[16];
    char Parent[16];
    //read garbage until next MB
};

struct secondDescriptor {
    headerDescriptor hd;
    int fd;
    int cursor;
};

headerDescriptor descriptor1;

void readHeaderDescriptor(int fd, headerDescriptor hd);

int main(int argc, char *argv[])
{
    //file descriptor
    int fd;

    //if no no arguments, then print something
    if(2 != argc)
    {
        printf("\n Usage :  \n");
        return 1;
    }

    //error number
    errno = 0;

    //file descriptor = open
    fd = open(argv[1],O_RDWR);  
    //this is erroe catching, if its false, the file opens
    if(-1 == fd)            
    {
        printf("\n open() failed with error [%s]\n",strerror(errno));
        return 1;
    }
    else
    {
        printf("\n Open() Successful\n");
        /* open() succeeded, now one can do read operations
           on the file opened since we opened it in read-only
           mode. Also once done with processing, the file needs
           to be closed. Closing a file can be achieved using
           close() function. */

        char num[4];
        read(fd, num, sizeof(num) );
        cout << "Read in num" << endl;
    }

    return 0;
}

void readHeaderDescriptor(int fd, headerDescriptor hd) {
    read(fd, hd.preheader, sizeof(hd.preheader) );
    read(fd, hd.name, sizeof(hd.name));
    read(fd, hd.versionNum, sizeof(hd.versionNum));
    read(fd, hd.sizeOfHeader, sizeof(hd.sizeOfHeader));
    read(fd, hd.imageType, sizeof(hd.imageType));
    read(fd, hd.imageFlags, sizeof(hd.imageFlags));
    read(fd, hd.imageDescription, sizeof(hd.imageDescription));
    read(fd, hd.offsetBlocks, sizeof(hd.offsetBlocks));
    read(fd, hd.numOfCylinders, sizeof(hd.numOfCylinders));
    read(fd, hd.numOfHeads, sizeof(hd.numOfHeads));
    read(fd, hd.numOfSectors, sizeof(hd.numOfSectors));
    read(fd, hd.sectorSize, sizeof(hd.numOfSectors));
    int unused;
    read(fd, unused, sizeof(unused));
    read(fd, hd.diskSize, sizeof(hd.diskSize));
    read(fd, hd.blockSize, sizeof(hd.blockSize));
    read(fd, hd.blockExtraData, sizeof(hd.blockExtraData));
    read(fd, hd.numOfBlocksInHDD, sizeof(hd.numOfBlocksInHDD));
    read(fd, hd.numOfBlocksAllocated, sizeof(hd.numOfBlocksAllocated));
    read(fd, hd.UUID, sizeof(hd.UUID));
    read(fd, hd.UUIDLastSnap, sizeof(hd.UUIDLastSnap));
    read(fd, hd.UUIDLink, sizeof(hd.UUIDLink));
    read(fd, hd.Parent, sizeof(hd.Parent));
    //garbage!!!!!!!
}